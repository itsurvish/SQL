-- MySQL Script generated by MySQL Workbench
-- Tue Dec 11 08:38:55 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema music_store
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema music_store
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `music_store` DEFAULT CHARACTER SET utf8 ;
USE `music_store` ;

-- -----------------------------------------------------
-- Table `music_store`.`customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`customers` (
  `customer_id` INT NOT NULL AUTO_INCREMENT,
  `email_address` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL DEFAULT '123',
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `ship_address_id` INT NOT NULL,
  ` billing_address_id` INT NOT NULL,
  PRIMARY KEY (`customer_id`),
  UNIQUE INDEX `email_address_UNIQUE` (`email_address` ASC) VISIBLE,
  UNIQUE INDEX `password_UNIQUE` (`password` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`addresses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`addresses` (
  `address_id` INT NOT NULL AUTO_INCREMENT,
  `line1` VARCHAR(100) NOT NULL,
  `line2` VARCHAR(100) NULL DEFAULT 'Null',
  `city` VARCHAR(45) NOT NULL,
  `state` VARCHAR(2) NOT NULL,
  `phone` VARCHAR(12) NOT NULL,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`address_id`),
  INDEX `fk_addresses_cutomers_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_addresses_cutomers`
    FOREIGN KEY (`customer_id`)
    REFERENCES `music_store`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`artists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`artists` (
  `artist_id` INT NOT NULL AUTO_INCREMENT,
  `artist_last_name` VARCHAR(60) NOT NULL,
  `artist_first_name` VARCHAR(60) NOT NULL,
  `image` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`artist_id`),
  UNIQUE INDEX `image_UNIQUE` (`image` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`genre` (
  `genre_id` INT NOT NULL AUTO_INCREMENT,
  `genre_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`genre_id`),
  UNIQUE INDEX `genre_name_UNIQUE` (`genre_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`albums`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`albums` (
  `album_id` INT NOT NULL AUTO_INCREMENT,
  `album_name` VARCHAR(45) NOT NULL,
  `total_tracks` INT NOT NULL,
  `album_price` DECIMAL(7,2) NOT NULL,
  `price_discount_percent` DECIMAL(7,2) NOT NULL DEFAULT 0,
  `release_year` YEAR(4) NOT NULL,
  `image` VARCHAR(100) NOT NULL,
  `artist_id` INT NOT NULL,
  `genre_id` INT NOT NULL,
  `stock` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`album_id`),
  UNIQUE INDEX `album_name_UNIQUE` (`album_name` ASC) VISIBLE,
  UNIQUE INDEX `image_UNIQUE` (`image` ASC) VISIBLE,
  INDEX `fk_albums_artists1_idx` (`artist_id` ASC) VISIBLE,
  INDEX `fk_albums_genre1_idx` (`genre_id` ASC) VISIBLE,
  CONSTRAINT `fk_albums_artists1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `music_store`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_albums_genre1`
    FOREIGN KEY (`genre_id`)
    REFERENCES `music_store`.`genre` (`genre_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`songs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`songs` (
  `song_id` INT NOT NULL AUTO_INCREMENT,
  `song_name` VARCHAR(45) NOT NULL,
  `size(inKB)` INT NOT NULL,
  `album_id` INT NOT NULL,
  `image` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`song_id`),
  INDEX `fk_songs_albums1_idx` (`album_id` ASC) VISIBLE,
  UNIQUE INDEX `image_UNIQUE` (`image` ASC) VISIBLE,
  CONSTRAINT `fk_songs_albums1`
    FOREIGN KEY (`album_id`)
    REFERENCES `music_store`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`preview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`preview` (
  `customer_id` INT NOT NULL,
  `song_id` INT NOT NULL,
  PRIMARY KEY (`customer_id`, `song_id`),
  INDEX `fk_cutomers_has_songs_songs1_idx` (`song_id` ASC) VISIBLE,
  INDEX `fk_cutomers_has_songs_cutomers1_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_cutomers_has_songs_cutomers1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `music_store`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cutomers_has_songs_songs1`
    FOREIGN KEY (`song_id`)
    REFERENCES `music_store`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`songs_artists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`songs_artists` (
  `songs_song_id` INT NOT NULL,
  `artists_artist_id` INT NOT NULL,
  PRIMARY KEY (`songs_song_id`, `artists_artist_id`),
  INDEX `fk_songs_has_artists_artists1_idx` (`artists_artist_id` ASC) VISIBLE,
  INDEX `fk_songs_has_artists_songs1_idx` (`songs_song_id` ASC) VISIBLE,
  CONSTRAINT `fk_songs_has_artists_songs1`
    FOREIGN KEY (`songs_song_id`)
    REFERENCES `music_store`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_songs_has_artists_artists1`
    FOREIGN KEY (`artists_artist_id`)
    REFERENCES `music_store`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`orders` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `order_date` DATETIME NOT NULL,
  `ship_amount` DECIMAL(7,2) NOT NULL,
  `tax_amount` DECIMAL(7,2) NOT NULL,
  `ship_date` DATETIME NULL,
  `ship_address_id` VARCHAR(45) NOT NULL,
  `card_type` VARCHAR(45) NOT NULL,
  `card_number` VARCHAR(45) NOT NULL,
  `billing_address_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `fk_orders_cutomers1_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_orders_cutomers1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `music_store`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`returns`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`returns` (
  `return_id` INT NOT NULL AUTO_INCREMENT,
  `quantity` VARCHAR(45) NOT NULL DEFAULT '1',
  `customer_id` INT NOT NULL,
  `album_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`return_id`),
  INDEX `fk_return_cutomers1_idx` (`customer_id` ASC) VISIBLE,
  INDEX `fk_return_albums1_idx` (`album_id` ASC) VISIBLE,
  INDEX `fk_return_orders1_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `fk_return_cutomers1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `music_store`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_return_albums1`
    FOREIGN KEY (`album_id`)
    REFERENCES `music_store`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_return_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `music_store`.`orders` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`order_items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`order_items` (
  `order_item_id` INT NOT NULL AUTO_INCREMENT,
  `quantity` INT NOT NULL DEFAULT 1,
  `order_id` INT NOT NULL,
  `album_id` INT NOT NULL,
  PRIMARY KEY (`order_item_id`),
  INDEX `fk_order_items_orders1_idx` (`order_id` ASC) VISIBLE,
  INDEX `fk_order_items_albums1_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `fk_order_items_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `music_store`.`orders` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_items_albums1`
    FOREIGN KEY (`album_id`)
    REFERENCES `music_store`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`employees` (
  `employee_id` INT NOT NULL AUTO_INCREMENT,
  `emp_last_name` VARCHAR(45) NOT NULL,
  `emp_first_name` VARCHAR(45) NOT NULL,
  `email_address` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`employee_id`),
  UNIQUE INDEX `email_address_UNIQUE` (`email_address` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store`.`employees_has_customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store`.`employees_has_customers` (
  `employee_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`employee_id`, `customer_id`),
  INDEX `fk_employees_has_customers_customers1_idx` (`customer_id` ASC) VISIBLE,
  INDEX `fk_employees_has_customers_employees1_idx` (`employee_id` ASC) VISIBLE,
  CONSTRAINT `fk_employees_has_customers_employees1`
    FOREIGN KEY (`employee_id`)
    REFERENCES `music_store`.`employees` (`employee_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_employees_has_customers_customers1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `music_store`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `music_store`.`customers`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`customers` (`customer_id`, `email_address`, `password`, `first_name`, `last_name`, `ship_address_id`, ` billing_address_id`) VALUES (001, 'EMAIL001@GMAIL.COM', '987', 'JOHN', 'SMITH', 001, 001);
INSERT INTO `music_store`.`customers` (`customer_id`, `email_address`, `password`, `first_name`, `last_name`, `ship_address_id`, ` billing_address_id`) VALUES (002, 'EMAIL002@GMAIL.COM', '22222', 'VJ', 'K', 002, 004);
INSERT INTO `music_store`.`customers` (`customer_id`, `email_address`, `password`, `first_name`, `last_name`, `ship_address_id`, ` billing_address_id`) VALUES (003, 'EMAIL003@GMAIL.COM', '3333', 'SMANTHA ', 'KAUR', 005, 006);
INSERT INTO `music_store`.`customers` (`customer_id`, `email_address`, `password`, `first_name`, `last_name`, `ship_address_id`, ` billing_address_id`) VALUES (004, 'EMAIL005@GMAIL.COM', '5555', 'JON', 'SINGH', 007, 009);
INSERT INTO `music_store`.`customers` (`customer_id`, `email_address`, `password`, `first_name`, `last_name`, `ship_address_id`, ` billing_address_id`) VALUES (005, 'EMAIL006@GMAIL.COM', '6666', 'RAJA', 'DHALIWAL', 008, 002);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`addresses`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (01, '25 UPPER CANADA DRIVE', '', 'KITCHENER', 'ON', '3657880498', 001);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (02, 'DOON VILLAGE ROAD', '', 'KITCHENER', 'ON', '5678887978', 001);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (03, 'APPLE RIDGE DRIVE ', '', 'KITCHENER', 'AB', '9876549878', 002);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (04, 'SHEVE TOWER', 'OLD MILL ROAD', 'CAMBRIDGE', 'ON', '5556667878', 002);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (05, 'ANDREW STREET', '', 'CAMBRIDGE', 'BC', '9877898888', 003);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (06, 'COLUMBIA STREET W', 'HIGHLAND ROAD', 'WATERLOO', 'BC', '5675478888', 003);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (07, 'ERB ST WEST', '', 'WATERLOO', 'ON', '4564556555', 004);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (08, 'KING STREET', NULL, 'TRONTO', 'ON', '4544566545', 005);
INSERT INTO `music_store`.`addresses` (`address_id`, `line1`, `line2`, `city`, `state`, `phone`, `customer_id`) VALUES (09, 'PINE STREET', NULL, 'TRONTO', 'ON', '4466544556', 005);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`artists`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`artists` (`artist_id`, `artist_last_name`, `artist_first_name`, `image`) VALUES (001, 'SIDHU', 'MOOSE WALA', 'MOOSEWALA.JPG');
INSERT INTO `music_store`.`artists` (`artist_id`, `artist_last_name`, `artist_first_name`, `image`) VALUES (002, 'BAJWA', 'JASS', 'JASS.PNG');
INSERT INTO `music_store`.`artists` (`artist_id`, `artist_last_name`, `artist_first_name`, `image`) VALUES (003, 'GREWAL', 'HARDEEP', 'HARDEEP.PNG');

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`genre`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`genre` (`genre_id`, `genre_name`) VALUES (001, 'BHANGRA');
INSERT INTO `music_store`.`genre` (`genre_id`, `genre_name`) VALUES (002, 'RAP');
INSERT INTO `music_store`.`genre` (`genre_id`, `genre_name`) VALUES (003, 'ROCK');
INSERT INTO `music_store`.`genre` (`genre_id`, `genre_name`) VALUES (004, 'POP');

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`albums`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`albums` (`album_id`, `album_name`, `total_tracks`, `album_price`, `price_discount_percent`, `release_year`, `image`, `artist_id`, `genre_id`, `stock`) VALUES (001, 'PBX1', 8, 55, 5.00, 2017, 'PBX1.PNG', 001, 001, 10);
INSERT INTO `music_store`.`albums` (`album_id`, `album_name`, `total_tracks`, `album_price`, `price_discount_percent`, `release_year`, `image`, `artist_id`, `genre_id`, `stock`) VALUES (002, 'JATT DE MUNDE', 6, 30, 8.00, 2018, 'JATTDEMUNDE.PNG', 003, 002, 20);
INSERT INTO `music_store`.`albums` (`album_id`, `album_name`, `total_tracks`, `album_price`, `price_discount_percent`, `release_year`, `image`, `artist_id`, `genre_id`, `stock`) VALUES (003 , 'BULANDIYAAN', 10, 55, 4.00, 2018, 'BULANDIYAAN.PNG', 002, 003, 16);
INSERT INTO `music_store`.`albums` (`album_id`, `album_name`, `total_tracks`, `album_price`, `price_discount_percent`, `release_year`, `image`, `artist_id`, `genre_id`, `stock`) VALUES (004, 'SO HIGH', 6, 59, 4.00, 2018, 'SOHIGH.PNG', 001, 001, 17);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`songs`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (001, 'JATT DA MOQABALA', 5048, 001, 'JATTDAMOQABALA.PNG');
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (002, 'BAD FELLA', 6047, 003, 'BADFELLA.PNG');
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (003, 'STUDENT', 4048, 002, 'STUDENT.PNG');
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (004, 'GARARI', 9870, 003, 'GARARI.PNG');
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (005, 'SLYBOOT', 4585, 004, 'SLYBOOT.PNG');
INSERT INTO `music_store`.`songs` (`song_id`, `song_name`, `size(inKB)`, `album_id`, `image`) VALUES (006, 'PINDAAN VALE', 7458, 003, 'PINDAANVALE.PNG');

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`preview`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (001, 006);
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (005, 003);
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (002, 005);
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (004, 006);
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (003, 002);
INSERT INTO `music_store`.`preview` (`customer_id`, `song_id`) VALUES (003, 001);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`songs_artists`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (001, 001);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (001, 002);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (002, 001);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (003, 003);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (005, 003);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (004, 002);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (004, 001);
INSERT INTO `music_store`.`songs_artists` (`songs_song_id`, `artists_artist_id`) VALUES (006, 001);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`orders`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (001, '2018-03-28 09:40:28', 5, 3, '2018-04-01 08:10:28', '001', 'MASTERCARD', '6666444488887777', 001, 001);
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (002, '2018-03-30 11:40:22', 4.88, 2, '2018-04-08 19:41:23', '002', 'VISA', '1111222233334444', 004, 002);
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (003, '2018-06-18 04:05:34', 4.88, 3.33, '2018-03-28 09:40:28', '005', 'MASTERCARD', '1111222233337789', 006, 003);
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (004, '2018-11-02 18:50:38', 5, 2.44, '2018-07-28 10:25:34', '007', 'MASTERCARD', '1111227233338559', 007, 001);
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (005, '2018-11-02 09:40:28', 5, 2.44, '2018-12-28 10:25:34', '008', 'VISA', '1111222233334567', 009, 005);
INSERT INTO `music_store`.`orders` (`order_id`, `order_date`, `ship_amount`, `tax_amount`, `ship_date`, `ship_address_id`, `card_type`, `card_number`, `billing_address_id`, `customer_id`) VALUES (006, '2018-11-05 09:40:28', 4.88, 4.55, '2018-12-29 10:25:34', '001', 'MASTERCARD', '1111222233339876', 002, 001);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`returns`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`returns` (`return_id`, `quantity`, `customer_id`, `album_id`, `order_id`) VALUES (001, '1', 001, 002, 001);
INSERT INTO `music_store`.`returns` (`return_id`, `quantity`, `customer_id`, `album_id`, `order_id`) VALUES (002, '2', 002, 001, 004);
INSERT INTO `music_store`.`returns` (`return_id`, `quantity`, `customer_id`, `album_id`, `order_id`) VALUES (003, '1', 003, 002, 003);
INSERT INTO `music_store`.`returns` (`return_id`, `quantity`, `customer_id`, `album_id`, `order_id`) VALUES (004, '1', 004, 004, 001);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`order_items`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (001, 2, 001, 001);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (002, 1, 001, 002);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (003, 3, 001, 004);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (004, 2, 003, 003);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (005, 4, 004, 001);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (006, 2, 002, 002);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (007, 3, 002, 003);
INSERT INTO `music_store`.`order_items` (`order_item_id`, `quantity`, `order_id`, `album_id`) VALUES (008, 2, 005, 004);

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`employees`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`employees` (`employee_id`, `emp_last_name`, `emp_first_name`, `email_address`) VALUES (001, 'singh', 'Manan', 'manaan@gmail.com');
INSERT INTO `music_store`.`employees` (`employee_id`, `emp_last_name`, `emp_first_name`, `email_address`) VALUES (002, 'george', 'Brown', 'brown@gmail.com');
INSERT INTO `music_store`.`employees` (`employee_id`, `emp_last_name`, `emp_first_name`, `email_address`) VALUES (003, 'kaur', 'Aman', 'aman@gmail.com');
INSERT INTO `music_store`.`employees` (`employee_id`, `emp_last_name`, `emp_first_name`, `email_address`) VALUES (004, 'kaushal', 'shanu', 'shanu@gmail.com');

COMMIT;


-- -----------------------------------------------------
-- Data for table `music_store`.`employees_has_customers`
-- -----------------------------------------------------
START TRANSACTION;
USE `music_store`;
INSERT INTO `music_store`.`employees_has_customers` (`employee_id`, `customer_id`) VALUES (001, 004);
INSERT INTO `music_store`.`employees_has_customers` (`employee_id`, `customer_id`) VALUES (003, 003);
INSERT INTO `music_store`.`employees_has_customers` (`employee_id`, `customer_id`) VALUES (002, 001);
INSERT INTO `music_store`.`employees_has_customers` (`employee_id`, `customer_id`) VALUES (001, 003);
INSERT INTO `music_store`.`employees_has_customers` (`employee_id`, `customer_id`) VALUES (001, 002);

COMMIT;

